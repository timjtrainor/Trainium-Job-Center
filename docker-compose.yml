version: '3.8'

services:
  # Defines the PostgreSQL database service
  db:
    image: postgres:15-alpine
    container_name: trainium_db
    restart: always
    environment:
      # These variables are loaded from the .env file
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # Maps the host port from .env to the container port
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # Defines the PostgREST service to create a REST API for the database
  postgrest:
    image: postgrest/postgrest
    container_name: trainium_api
    restart: always
    ports:
      - "${POSTGREST_PORT}:3000"
    environment:
      # The connection string is now built using variables from the .env file
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: ${POSTGRES_USER}
    depends_on:
      - db

  # Defines the Redis cache service
  redis:
    image: redis:7-alpine
    container_name: trainium_redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data

  # Defines the React front-end service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trainium_frontend
    restart: always
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      # Mount the current directory ('.') which is the frontend source code
      - .:/app
      - /app/node_modules
    depends_on:
      - postgrest
      - python-service

  # Defines the Python AI microservice
  python-service:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    image: python-service
    container_name: trainium_python_service
    restart: always
    ports:
      - "${PYTHON_SERVICE_PORT:-8000}:8000"
    environment:
      # Environment configuration for Python service
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      POSTGREST_URL: http://postgrest:3000
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
    volumes:
      # Mount the python service code for development
      - ./python-service:/app
    depends_on:
      - postgrest
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Defines the worker process using the python-service image
  worker:
    image: python-service
    container_name: trainium_worker
    entrypoint: ["python", "worker.py"]
    depends_on:
      - python-service
      - redis

  # Defines the scheduler daemon using the python-service image
  scheduler:
    image: python-service
    container_name: trainium_scheduler
    entrypoint: ["python", "scheduler_daemon.py"]
    depends_on:
      - python-service
      - redis

volumes:
  # Defines the named volumes for data persistence.
  postgres_data:
  redis_data:
