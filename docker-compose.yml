services:
  # Defines the PostgreSQL database service
  db:
    image: postgres:15-alpine
    container_name: trainium_db
    restart: always
    environment:
      # These variables are loaded from the .env file
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      # Maps the host port from .env to the container port
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Defines the PostgREST service to create a REST API for the database
  postgrest:
    image: postgrest/postgrest
    container_name: trainium_api
    restart: always
    ports:
      - "${POSTGREST_PORT}:3000"
    environment:
      # The connection string is now built using variables from the .env file
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: ${POSTGRES_USER}
    depends_on:
      db:
        condition: service_healthy

  # Defines the Redis cache service
  redis:
    image: redis:7-alpine
    container_name: trainium_redis
    restart: always
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Defines the ChromaDB vector database service
  chromadb:
    build:
      context: .
      dockerfile: Dockerfile.chromadb
    container_name: trainium_chromadb
    restart: always
    ports:
      - "${CHROMA_PORT:-8001}:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    healthcheck:
      test: [ "CMD", "/bin/bash", "-c", "cat < /dev/null > /dev/tcp/localhost/8000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Defines the React front-end service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trainium_frontend
    restart: always
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      # Mount the current directory ('.') which is the frontend source code
      - .:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - postgrest
      - python-service

  # Defines the Python AI microservice
  python-service:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    image: python-service
    container_name: trainium_python_service
    restart: always
    ports:
      - "${PYTHON_SERVICE_PORT:-8000}:8000"
    environment:
      # Environment configuration for Python service
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      LLM_PREFERENCE: ${LLM_PREFERENCE}
      OLLAMA_HOST: ${OLLAMA_HOST}
      POSTGREST_URL: ${POSTGREST_URL}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      CHROMA_URL: ${CHROMA_URL:-chromadb}
      CHROMA_PORT: ${CHROMA_PORT:-8001}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-sentence_transformer}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-BAAI/bge-m3}
      # MCP Gateway configuration
      MCP_GATEWAY_URL: ${MCP_GATEWAY_URL:-http://mcp-gateway:8811}
      MCP_GATEWAY_ENABLED: ${MCP_GATEWAY_ENABLED:-true}
    volumes:
      # Mount the python service code for development
      - ./python-service:/app
    depends_on:
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      mcp-gateway:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Defines the worker process using the python-service image
  worker:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    image: python-service:latest
    entrypoint: ["python", "worker.py"]
    environment:
      # Environment configuration for worker
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      LLM_PREFERENCE: ${LLM_PREFERENCE}
      OLLAMA_HOST: ${OLLAMA_HOST}
      POSTGREST_URL: ${POSTGREST_URL}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-sentence_transformer}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-BAAI/bge-m3}
    deploy:
      replicas: 5   # Number of workers
    depends_on:
      redis:
        condition: service_healthy

  # Defines the scheduler daemon using the python-service image
  scheduler:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    image: python-service
    container_name: trainium_scheduler
    entrypoint: ["python", "scheduler_daemon.py"]
    environment:
      # Environment configuration for scheduler
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      LLM_PREFERENCE: ${LLM_PREFERENCE}
      OLLAMA_HOST: ${OLLAMA_HOST}
      POSTGREST_URL: ${POSTGREST_URL}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER:-sentence_transformer}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-BAAI/bge-m3}
    depends_on:
      redis:
        condition: service_healthy

  # Defines the poller daemon using the python-service image
  poller:
    build:
      context: ./python-service
      dockerfile: Dockerfile
    image: python-service
    container_name: trainium_poller
    entrypoint: ["python", "poller_daemon.py"]
    environment:
      # Environment configuration for poller
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-false}
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_DB: ${REDIS_DB:-0}
      # Poller-specific configuration
      POLL_INTERVAL_MINUTES: ${POLL_INTERVAL_MINUTES:-5}
      JOB_REVIEW_QUEUE_NAME: ${JOB_REVIEW_QUEUE_NAME:-job_review}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # LinkedIn MCP Server
  linkedin-mcp-server:
    container_name: trainium_linkedin_mcp
    image: stickerdaniel/linkedin-mcp-server
    environment:
      LINKEDIN_EMAIL: ${LINKEDIN_EMAIL}
      LINKEDIN_PASSWORD: ${LINKEDIN_PASSWORD}
      LINKEDIN_SESSION_COOKIE: ${LINKEDIN_SESSION_COOKIE}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Docker MCP Gateway for managing MCP servers
  mcp-gateway:
    container_name: trainium_mcp_gateway
    image: docker/mcp-gateway
    command:
      - --servers=duckduckgo,linkedin
      - --transport=sse
      - --port=8811
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "${MCP_GATEWAY_PORT:-8811}:8811"
    restart: unless-stopped
    depends_on:
      linkedin-mcp-server:
        condition: service_healthy
    healthcheck:
      test: wget -O- http://localhost:8811/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s


volumes:
  # Defines the named volumes for data persistence.
  postgres_data:
  redis_data:
  chroma_data:


