intake_task:
  description: >
    Parse the provided job posting text into structured JSON with keys: 
    title, company, salary, location, seniority, job_type, description.
  expected_output: >
    A clean JSON object with job attributes extracted from the posting.
  agent: job_intake_agent

pre_filter_task:
  description: >
    Apply hard rejection rules to the structured job data. 
    Reject if highest salary is below 180,000 per year,
    if salary is missing AND seniority is below "Senior",
    or if highest salary is below 210,000 per year and 
    location/work model is in person.
  expected_output: >
    Either {"status": "reject", "reason": "..."} 
    or {"status": "pass"} if job should continue.
  agent: pre_filter_agent

quick_fit_task:
  description: >
    For jobs that pass pre-filtering, evaluate the structured job data for 
    career growth, compensation, lifestyle fit, and purpose alignment.
  expected_output: >
    {
      "career_growth_score": 0-10,
      "compensation_score": 0-10,
      "lifestyle_fit_score": 0-10,
      "purpose_alignment_score": 0-10,
      "overall_fit": "low | medium | high",
      "quick_recommendation": "reject | review_deeper"
    }
  agent: quick_fit_analyst

brand_match_task:
  description: >
    Compare the structured job data to the user's Career Brand Framework 
    stored in ChromaDB. Return similarity scores and short alignment notes.
  expected_output: >
    {
      "brand_alignment_score": 0-10,
      "alignment_notes": ["..."]
    }
  agent: brand_framework_matcher

orchestration_task:
  description: >
    Manage the pipeline for {{job_posting}}: 
    1. Run intake_task â†’ pre_filter_task. 
    2. If {{pre_filter_task.output}} is "reject", stop. 
    3. If {{pre_filter_task.output}} is "pass", run quick_fit_task. 
    4. If {{quick_fit_task.output.quick_recommendation}} is "review_deeper", run brand_match_task. 
    5. Provide a final recommendation: "green-light" or "reject" with reasons.
  expected_output: >
    A final JSON object with all relevant results and the decision.
  agent: managing_agent
  input:
    job_posting: "{{job_posting}}"
    pre_filter_result: "{{pre_filter_task.output}}"
    quick_fit_result: "{{quick_fit_task.output}}"
    brand_match_result: "{{brand_match_task.output}}"