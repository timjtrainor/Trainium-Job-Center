# intake_task removed - data is already structured in jobs table

pre_filter_task:
  description: >
    Apply ONLY these rules to the job data:
    - Reject if highest_salary < 180000
    - Reject if salary is missing AND seniority < "Senior"
    - Reject if Job title does not contain "Product" or "Program"
    - Reject if highest_salary < 210000 AND job_type = "in-person"

    IMPORTANT:
    - Do not invent new rejection rules (e.g., no "location mismatch" or "market comparison").
    - Only check salary, seniority, and job_type.
    - Ignore all other fields.

  expected_output: >
    A strict JSON object with "recommend" (boolean) and optional "reason" (string). 
    Example: {"recommend": false, "reason": "Rule 1: salary below 180000"}
  agent: pre_filter_agent

quick_fit_task:
  description: >
    For jobs that pass pre-filtering, quickly evaluate structured job data for 
    career growth potential, compensation competitiveness, lifestyle fit, and purpose alignment.
    Focus on the most important factors - be concise and decisive.
  expected_output: >
    Concise JSON: {"overall_fit": "low|medium|high", "quick_recommendation": "reject|approve|review_deeper", "key_reason": "Brief 1-2 sentence explanation"}
  agent: quick_fit_analyst

brand_match_task:
  description: >
    Compare the structured job data against the user's five Career Brand Framework dimensions.
    
    You have access to the search_career_brands tool which can filter by metadata sections.
    Query each of the five career brand sections individually:
    - north_star_vision → North Star & Vision
    - trajectory_mastery → Trajectory & Mastery  
    - values_compass → Values Compass
    - lifestyle_alignment → Lifestyle Alignment
    - compensation_philosophy → Compensation Philosophy
    
    For each section, use search_career_brands with the where_filter parameter:
    search_career_brands("job requirements alignment", 3, '{"section": "north_star_vision"}')
    
    Evaluate job alignment for each dimension separately and return structured JSON.
    Each dimension should receive a score (0-10) and a concise summary (1-2 sentences).
    Calculate an overall alignment score and provide an overall summary.
    
  expected_output: >
    Structured JSON with all five dimensions plus overall assessment:
    {
      "north_star": {"score": 0-10, "summary": "Brief alignment assessment for North Star & Vision"},
      "trajectory_mastery": {"score": 0-10, "summary": "Brief alignment assessment for Trajectory & Mastery"},
      "values_compass": {"score": 0-10, "summary": "Brief alignment assessment for Values Compass"},
      "lifestyle_alignment": {"score": 0-10, "summary": "Brief alignment assessment for Lifestyle Alignment"},
      "compensation_philosophy": {"score": 0-10, "summary": "Brief alignment assessment for Compensation Philosophy"},
      "overall_alignment_score": 0-10,
      "overall_summary": "Brief 1-2 sentence overall alignment summary"
    }
  agent: brand_framework_matcher

orchestration_task:
  description: >
    You are the Job Review Orchestrator managing the evaluation pipeline for structured job data: {{job_posting}}

    **OPTIMIZED WORKFLOW** (job intake already done):
    
    Your workflow MUST be:
    1. Start directly with pre_filter_agent to apply rejection criteria (salary, seniority, job_type)
    2. **STOP IMMEDIATELY** if pre_filter_agent returns recommend: false - do not run any more tasks
    3. Only if pre-filter passes, delegate to quick_fit_analyst for assessment
    4. Only run brand_framework_matcher if quick_fit_analyst recommends "review_deeper" or "approve"
    
    **EARLY TERMINATION RULE**: If pre_filter_agent recommends rejection, immediately return final decision without further analysis.
    
    **CONCISE OUTPUT FORMAT** for jobs that pass pre-filtering:
    Return exactly this JSON structure:
    ```json
    {
      "final": {
        "recommend": boolean,
        "rationale": "Concise explanation (1-2 sentences max)", 
        "confidence": "low|medium|high"
      },
      "personas": [
        {
          "id": "agent_name", 
          "recommend": boolean,
          "reason": "Brief agent reason (1 sentence)"
        }
      ],
      "tradeoffs": ["max 2-3 key tradeoffs if any"],
      "actions": ["max 1-2 key actions if any"],
      "sources": ["list of agents that contributed"]
    }
    ```
    
    **PERFORMANCE OPTIMIZATION**:
    - Use "Delegate work to coworker" tool for each agent
    - Stop as soon as pre_filter_agent rejects
    - Keep all text concise - no verbose explanations
    - Include only agents that actually ran in the personas array
  expected_output: >
    Concise JSON object with keys: final, personas, tradeoffs, actions, sources.
    Must implement early termination on pre-filter rejection for optimal performance.
  agent: managing_agent